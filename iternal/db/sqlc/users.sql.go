// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    project_account_id,
    name, 
    uuid
) VALUES (
    $1, $2, $3
) 
RETURNING id, project_account_id, name, uuid, last_update_at, created_at
`

type CreateUserParams struct {
	ProjectAccountID sql.NullString `json:"projectAccountID"`
	Name             sql.NullString `json:"name"`
	Uuid             sql.NullString `json:"uuid"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ProjectAccountID, arg.Name, arg.Uuid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProjectAccountID,
		&i.Name,
		&i.Uuid,
		&i.LastUpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByProjectAccountId = `-- name: GetUserByProjectAccountId :one
SELECT id, project_account_id, name, uuid, last_update_at, created_at FROM users
WHERE project_account_id = $1 LIMIT 1
`

func (q *Queries) GetUserByProjectAccountId(ctx context.Context, projectAccountID sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByProjectAccountId, projectAccountID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProjectAccountID,
		&i.Name,
		&i.Uuid,
		&i.LastUpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUUID = `-- name: GetUserByUUID :one
SELECT id, project_account_id, name, uuid, last_update_at, created_at FROM users
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetUserByUUID(ctx context.Context, uuid sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUUID, uuid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProjectAccountID,
		&i.Name,
		&i.Uuid,
		&i.LastUpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, project_account_id, name, uuid, last_update_at, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.ProjectAccountID,
			&i.Name,
			&i.Uuid,
			&i.LastUpdateAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET project_account_id = $2,
    name = $3,
    uuid = $4,
    last_update_at = now()
WHERE uuid = $1
RETURNING id, project_account_id, name, uuid, last_update_at, created_at
`

type UpdateUserParams struct {
	Uuid             sql.NullString `json:"uuid"`
	ProjectAccountID sql.NullString `json:"projectAccountID"`
	Name             sql.NullString `json:"name"`
	Uuid_2           sql.NullString `json:"uuid2"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Uuid,
		arg.ProjectAccountID,
		arg.Name,
		arg.Uuid_2,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ProjectAccountID,
		&i.Name,
		&i.Uuid,
		&i.LastUpdateAt,
		&i.CreatedAt,
	)
	return i, err
}
