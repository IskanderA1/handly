// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: logs.sql

package db

import (
	"context"
	"database/sql"
)

const createLog = `-- name: CreateLog :one
INSERT INTO logs(
    project_id,
    event_id,
    user_id,
    data
) VALUES (
    $1, $2, $3, $4
) 
RETURNING id, project_id, event_id, user_id, data, created_at
`

type CreateLogParams struct {
	ProjectID int64          `json:"projectID"`
	EventID   int64          `json:"eventID"`
	UserID    string         `json:"userID"`
	Data      sql.NullString `json:"data"`
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.db.QueryRowContext(ctx, createLog,
		arg.ProjectID,
		arg.EventID,
		arg.UserID,
		arg.Data,
	)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.EventID,
		&i.UserID,
		&i.Data,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProjectLogs = `-- name: DeleteProjectLogs :exec
DELETE FROM logs WHERE project_id = $1
`

func (q *Queries) DeleteProjectLogs(ctx context.Context, projectID int64) error {
	_, err := q.db.ExecContext(ctx, deleteProjectLogs, projectID)
	return err
}

const listProjectLog = `-- name: ListProjectLog :many
SELECT id, project_id, event_id, user_id, data, created_at FROM logs
WHERE project_id = $1
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type ListProjectLogParams struct {
	ProjectID int64 `json:"projectID"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListProjectLog(ctx context.Context, arg ListProjectLogParams) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, listProjectLog, arg.ProjectID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Log{}
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.EventID,
			&i.UserID,
			&i.Data,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserLog = `-- name: ListUserLog :many
SELECT id, project_id, event_id, user_id, data, created_at FROM logs
WHERE user_id = $1
ORDER BY created_at
LIMIT $2
OFFSET $3
`

type ListUserLogParams struct {
	UserID string `json:"userID"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListUserLog(ctx context.Context, arg ListUserLogParams) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, listUserLog, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Log{}
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.EventID,
			&i.UserID,
			&i.Data,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
