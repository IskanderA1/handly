// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: accounts.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts(
    account_id,
    name, 
    uuid
) VALUES (
    $1, $2, $3
) 
RETURNING account_id, name, uuid, last_update_at, created_at
`

type CreateAccountParams struct {
	AccountID string `json:"accountID"`
	Name      string `json:"name"`
	Uuid      string `json:"uuid"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.AccountID, arg.Name, arg.Uuid)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Name,
		&i.Uuid,
		&i.LastUpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE account_id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID string) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, accountID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT account_id, name, uuid, last_update_at, created_at FROM accounts
WHERE account_id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, accountID string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, accountID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Name,
		&i.Uuid,
		&i.LastUpdateAt,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT account_id, name, uuid, last_update_at, created_at FROM accounts
ORDER BY account_id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.AccountID,
			&i.Name,
			&i.Uuid,
			&i.LastUpdateAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET name = $2,
    uuid = $3,
    last_update_at = now()
WHERE account_id = $1
RETURNING account_id, name, uuid, last_update_at, created_at
`

type UpdateAccountParams struct {
	AccountID string `json:"accountID"`
	Name      string `json:"name"`
	Uuid      string `json:"uuid"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.AccountID, arg.Name, arg.Uuid)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Name,
		&i.Uuid,
		&i.LastUpdateAt,
		&i.CreatedAt,
	)
	return i, err
}
