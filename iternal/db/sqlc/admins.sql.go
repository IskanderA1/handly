// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: admins.sql

package db

import (
	"context"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins(
    username,
    password, 
    full_name 
) VALUES (
    $1, $2, $3
) 
RETURNING username, password, full_name, created_at
`

type CreateAdminParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	FullName string `json:"fullName"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin, arg.Username, arg.Password, arg.FullName)
	var i Admin
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM admins WHERE username = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, username)
	return err
}

const getAdminByUsername = `-- name: GetAdminByUsername :one
SELECT username, password, full_name, created_at FROM admins WHERE username = $1 LIMIT 1
`

func (q *Queries) GetAdminByUsername(ctx context.Context, username string) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminByUsername, username)
	var i Admin
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}

const listAdmins = `-- name: ListAdmins :many
SELECT username, password, full_name, created_at FROM admins
ORDER BY username
LIMIT $1
OFFSET $2
`

type ListAdminsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAdmins(ctx context.Context, arg ListAdminsParams) ([]Admin, error) {
	rows, err := q.db.QueryContext(ctx, listAdmins, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Admin{}
	for rows.Next() {
		var i Admin
		if err := rows.Scan(
			&i.Username,
			&i.Password,
			&i.FullName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdmin = `-- name: UpdateAdmin :one
UPDATE admins
SET password = $2,
    full_name = $3
WHERE username = $1
RETURNING username, password, full_name, created_at
`

type UpdateAdminParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	FullName string `json:"fullName"`
}

func (q *Queries) UpdateAdmin(ctx context.Context, arg UpdateAdminParams) (Admin, error) {
	row := q.db.QueryRowContext(ctx, updateAdmin, arg.Username, arg.Password, arg.FullName)
	var i Admin
	err := row.Scan(
		&i.Username,
		&i.Password,
		&i.FullName,
		&i.CreatedAt,
	)
	return i, err
}
